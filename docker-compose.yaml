version: '3'

networks:
  elk:
    # 컨테이너 간 통신을 위한 네트워크 설정
    # bridge: 컨테이너 간 통신을 위한 가상 네트워크를 생성하고, 컨테이너를 생성할 때마다 컨테이너에 자동으로 연결
    # Docker는 기본적으로 bridge 네트워크를 생성하고, 컨테이너를 생성할 때마다 컨테이너에 자동으로 연결
    # 여기서는 bridge 명시적으로 설정 처리 
    driver: bridge

services:
  # ES 버전에 따라 logstash, kibana 버전 사용 (별도 .env 파일로 관리하는 코드도 확인함)
  # ES 설정
  elasticsearch:
    container_name: elasticsearch
    image: elasticsearch:8.7.0
    # ES 포트
    # 9201: REST API 포트
    # 9301: 노드 간 통신 포트
    ports:
      - 9201:9201
      - 9301:9301
    volumes: 
      - ./elasticsearch:/usr/share/elasticsearch/data
    # ES 계정
    environment:
      # ES는 다중 노드를 필요로 하며 강제 사항으로 2개 이상 필요, 그러나 개발용으로는 1개로도 가능 (single-node)
      discovery.type: single-node
      # xpack으로 노드간 통신 암호화 가능
      # xpack 설정 시, elasticsearch.yml에 아래 내용 추가 (컨테이너 접속, CA 및 개인키 생성 필요)
      # docker exec -it [컨테이너명] /bin/bash
      # ./bin/elasticsearch-certutil ca
      # ./bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12
      # 위 내용 실행 이후 하단 내용 주석해제하여 암호화 처리
      # xpack.security.enabled: "true"
      # xpack.security.transport.ssl.enabled: "true"
      ELASTIC_USERNAME: "admin"
      ELASTIC_PASSWORD: ""
    networks:
      - elk

  # Logstash 설정
  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:8.7.0
    ports:
      - 5001:5001
      - 9601:9601
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on: 
      - elasticsearch
    networks:
      - elk

  # Kibana 설정
  kibana:
    container_name: kibana
    image: kibana:8.7.0
    ports: 
      - 5601:5601
    depends_on:
      - elasticsearch
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - elk
